# Do not modify this file!  It was generated by ‘nixos-generate-config’
# and may be overwritten by future invocations.  Please make changes
# to /etc/nixos/configuration.nix instead.
{
  config,
  lib,
  modulesPath,
  ...
}: {
  imports = [
    (modulesPath + "/installer/scan/not-detected.nix")
  ];

  boot.initrd.availableKernelModules = ["xhci_pci" "ahci" "usbhid" "usb_storage" "sd_mod"];
  boot.initrd.kernelModules = [];
  boot.kernelModules = [];
  boot.extraModulePackages = [];

  fileSystems."/" = {
    device = "/dev/disk/by-uuid/8ebc4dcb-c5a8-4675-8ab4-8544814eaa2c";
    fsType = "btrfs";
    options = ["subvol=@"];
  };

  fileSystems."/media/dataB" = {
    device = "/dev/disk/by-uuid/a8bfb84b-5ecf-444d-8730-1b7c36566c33";
    fsType = "ext4";
  };

  fileSystems."/media/dataA" = {
    device = "/dev/disk/by-uuid/8d458c68-3e31-43d1-9239-9e7a8faf4621";
    fsType = "btrfs";
  };

  # the nvme
  fileSystems."/media/dataC" = {
    device = "/dev/disk/by-uuid/fc5d8dc7-d0c4-451a-b923-6926b4578b20";
    fsType = "btrfs";
  };

  swapDevices = [
    {
      device = "/swapfile";
      size = 16 * 1024;
    }
  ];

  # Enables DHCP on each ethernet and wireless interface. In case of scripted networking
  # (the default) this is the recommended approach. When using systemd-networkd it's
  # still possible to use this option, but it's recommended to use it in conjunction
  # with explicit per-interface declarations with `networking.interfaces.<interface>.useDHCP`.
  networking.useDHCP = lib.mkDefault true;
  # networking.interfaces.enp7s0.useDHCP = lib.mkDefault true;

  nixpkgs.hostPlatform = lib.mkDefault "x86_64-linux";
  hardware.cpu.amd.updateMicrocode = lib.mkDefault config.hardware.enableRedistributableFirmware;
}
